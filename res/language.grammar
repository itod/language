@h {
    
#define XP_TOKEN_KIND_BLOCK -2
#define XP_TOKEN_KIND_CALL  -3
#define XP_TOKEN_KIND_ASSIGN_INDEX -4
#define XP_TOKEN_KIND_ASSIGN_APPEND -5
#define XP_TOKEN_KIND_NEG -6
#define XP_TOKEN_KIND_LOAD -7
#define XP_TOKEN_KIND_LOAD_INDEX -8

@class PKTokenizer;
@class XPGlobalScope;
@protocol XPScope;
}

@interface {
+ (PKTokenizer *)tokenizer;

@property (nonatomic, retain) id <XPScope>currentScope;
@property (nonatomic, retain) XPGlobalScope *globalScope;
@property (nonatomic, assign) BOOL allowNakedExpressions;
@property (nonatomic, assign) BOOL foundDefaultParam;
}

@m {
#import <Language/XPException.h>
#import <Language/XPNode.h>
#import <Language/XPBooleanValue.h>
#import <Language/XPNumericValue.h>
#import <Language/XPStringValue.h>
#import <Language/XPFunctionValue.h>
#import <Language/XPArrayValue.h>

#import <Language/XPGlobalScope.h>
#import <Language/XPLocalScope.h>
#import <Language/XPVariableSymbol.h>
#import <Language/XPFunctionSymbol.h>

@interface PKParser ()
- (void)raiseInRange:(NSRange)r lineNumber:(NSUInteger)lineNum name:(NSString *)name format:(NSString *)fmt, ...;
@end
}

@extension {
@property (nonatomic, retain) PKToken *blockTok;
@property (nonatomic, retain) PKToken *loadTok;
@property (nonatomic, retain) PKToken *callTok;
@property (nonatomic, retain) PKToken *indexTok;
@property (nonatomic, retain) PKToken *assignIndexTok;
@property (nonatomic, retain) PKToken *assignAppendTok;
@property (nonatomic, retain) PKToken *subTok;
@property (nonatomic, retain) PKToken *anonTok;
@property (nonatomic, retain) PKToken *openParenTok;
@property (nonatomic, retain) PKToken *openCurlyTok;
@property (nonatomic, retain) PKToken *openSquareTok;
@property (nonatomic, retain) PKToken *minusTok;
@property (nonatomic, retain) PKToken *colonTok;
@property (nonatomic, retain) PKToken *equalsTok;
@property (nonatomic, retain) PKToken *notTok;
@property (nonatomic, retain) PKToken *negTok;
@property (nonatomic, assign) BOOL negation;
@property (nonatomic, assign) BOOL negative;
}

@implementation {
+ (PKTokenizer *)tokenizer {
    PKTokenizer *t = [PKTokenizer tokenizer];
    [t.symbolState add:@"=="];
    [t.symbolState add:@"!="];
    [t.symbolState add:@"<="];
    [t.symbolState add:@">="];
    [t.symbolState add:@"&&"];
    [t.symbolState add:@"||"];
    
    [t setTokenizerState:t.symbolState from:'-' to:'-'];
    [t.wordState setWordChars:NO from:'-' to:'-'];
    [t.wordState setWordChars:NO from:'\'' to:'\''];
    return t;
}

}

@init {
    self.enableVerboseErrorReporting = NO;
    self.tokenizer = [[self class] tokenizer];
    self.blockTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"BLOCK" doubleValue:0.0];
    self.blockTok.tokenKind = XP_TOKEN_KIND_BLOCK;
    self.loadTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"LOAD" doubleValue:0.0];
    self.loadTok.tokenKind = XP_TOKEN_KIND_LOAD;
    self.callTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"CALL" doubleValue:0.0];
    self.callTok.tokenKind = XP_TOKEN_KIND_CALL;
    self.indexTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"LOAD INDEX" doubleValue:0.0];
    self.indexTok.tokenKind = XP_TOKEN_KIND_LOAD_INDEX;
    self.assignIndexTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"ASSIGN INDEX" doubleValue:0.0];
    self.assignIndexTok.tokenKind = XP_TOKEN_KIND_ASSIGN_INDEX;
    self.assignAppendTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"ASSIGN APPEND" doubleValue:0.0];
    self.assignAppendTok.tokenKind = XP_TOKEN_KIND_ASSIGN_APPEND;
    self.subTok = [PKToken tokenWithTokenType:PKTokenTypeWord stringValue:@"sub" doubleValue:0.0];
    self.anonTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"<ANON>" doubleValue:0.0];
    self.openParenTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"(" doubleValue:0.0];
    self.openCurlyTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:[NSString stringWithFormat:@"%C", 0x7B] doubleValue:0.0];
    self.openSquareTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"[" doubleValue:0.0];
    self.minusTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"-" doubleValue:0.0];
    self.colonTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@":" doubleValue:0.0];
    self.equalsTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"=" doubleValue:0.0];
    self.notTok = [PKToken tokenWithTokenType:PKTokenTypeWord stringValue:@"not" doubleValue:0.0];
    self.notTok.tokenKind = XP_TOKEN_KIND_NOT;
    self.negTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"NEG" doubleValue:0.0];
    self.negTok.tokenKind = XP_TOKEN_KIND_NEG;
}

@dealloc {
    self.currentScope = nil;
    self.globalScope = nil;
    self.blockTok = nil;
    self.loadTok = nil;
    self.callTok = nil;
    self.indexTok = nil;
    self.assignIndexTok = nil;
    self.assignAppendTok = nil;
    self.subTok = nil;
    self.anonTok = nil;
    self.openParenTok = nil;
    self.openCurlyTok = nil;
    self.openSquareTok = nil;
    self.minusTok = nil;
    self.colonTok = nil;
    self.equalsTok = nil;
    self.notTok = nil;
    self.negTok = nil;
}

// GLOBAL
program
@before {
    self.currentScope = _globalScope;
}
            = globalList;

globalList  = globalItem+ {
    NSArray *items = REV(ABOVE(nil));
    XPNode *block = [XPNode nodeWithToken:_blockTok];
    for (id item in items) [block addChild:item];
    PUSH(block);
};

globalItem  = stat | ifBlock | whileBlock | funcDecl | block;

// LOCAL
localList   = localItem+;
localItem   = stat | block;

block
@before {
    self.currentScope = [XPLocalScope scopeWithEnclosingScope:_currentScope];
}
@after {
    self.currentScope = _currentScope.enclosingScope;
    
    NSArray *stats = REV(ABOVE(_openCurlyTok));
    XPNode *block = [XPNode nodeWithToken:POP()];
    [block addChildren:stats];
    PUSH(block);
}
            = '{' localList? '}'!;

// STATEMENTS
stat        = 
            ( varDecl
            | assign
            | assignIndex
            | assignAppend
            | expr
            )?
            ';'!
            | { _allowNakedExpressions }? expr
            ;

varDecl     = 'var' qid '='! expr {
    XPNode *rhs = POP();
    XPNode *lhs = [XPNode nodeWithToken:POP()];
    PKToken *tok = POP();
    
    XPNode *stat = [XPNode nodeWithToken:tok];
    [stat addChild:lhs]; [stat addChild:rhs];
    PUSH(stat);
};
qid         = Word;

assign      = qid '=' expr {
    XPNode *rhs = POP();
    PKToken *tok = POP();
    XPNode *lhs = [XPNode nodeWithToken:POP()];
    
    XPNode *stat = [XPNode nodeWithToken:tok];
    [stat addChild:lhs]; [stat addChild:rhs];
    PUSH(stat);
};

assignIndex = qid '['! expr ']'! '='! expr {
    XPNode *rhs = POP();
    XPNode *idx = POP();
    XPNode *lhs = [XPNode nodeWithToken:POP()];
    
    XPNode *stat = [XPNode nodeWithToken:_assignIndexTok];
    [stat addChild:lhs];
    [stat addChild:idx];
    [stat addChild:rhs];
    PUSH(stat);
};

assignAppend = qid '['! ']'! '='! expr {
    XPNode *rhs = POP();
    XPNode *lhs = [XPNode nodeWithToken:POP()];
    
    XPNode *stat = [XPNode nodeWithToken:_assignAppendTok];
    [stat addChild:lhs];
    [stat addChild:rhs];
    PUSH(stat);
};

// WHILE BLOCK
whileBlock  = 'while' expr block {
    XPNode *block = POP();
    XPNode *expr = POP();
    XPNode *whileNode = [XPNode nodeWithToken:POP()];
    [whileNode addChild:expr];
    [whileNode addChild:block];
    PUSH(whileNode);
};

// IF BLOCK
ifBlock     = 'if' expr block {
    XPNode *block = POP();
    XPNode *expr = POP();
    XPNode *ifNode = [XPNode nodeWithToken:POP()];
    [ifNode addChild:expr];
    [ifNode addChild:block];
    PUSH(ifNode);
}
              elifBlock* elseBlock?;
elifBlock   = 'else'! 'if' expr block {
    XPNode *block = POP();
    XPNode *expr = POP();
    XPNode *elifNode = [XPNode nodeWithToken:POP()];
    [elifNode addChild:expr];
    [elifNode addChild:block];

    XPNode *ifNode = PEEK();
    [ifNode addChild:elifNode];
};
elseBlock   = 'else' block {
    XPNode *block = POP();
    XPNode *elseNode = [XPNode nodeWithToken:POP()];
    [elseNode addChild:block];

    XPNode *ifNode = PEEK();
    [ifNode addChild:elseNode];
};

// FUNCTION DECL
funcList    = funcItem+;
funcItem    = stat | ifBlock | whileBlock | block | returnStat;
returnStat  = 'return' expr ';'! {
    XPNode *expr = POP();
    XPNode *ret = [XPNode nodeWithToken:POP()];
    [ret addChild:expr];
    PUSH(ret);
};

funcDecl    = 'sub' qid {    
    // def func
    PKToken *nameTok = POP();
    XPFunctionSymbol *funcSym = [XPFunctionSymbol symbolWithName:nameTok.stringValue enclosingScope:_currentScope];
    [_currentScope defineSymbol:funcSym];
    id subTok = POP();
    XPNode *func = [XPNode nodeWithToken:subTok];
    [func addChild:[XPNode nodeWithToken:nameTok]]; // qid / func name
    PUSH(func);
    PUSH(subTok); // barrier for later

    // push func scope
    self.currentScope = funcSym;
}           funcBody {
    POP(); // pop func node for non literls
};

funcBody    =
              '('! paramList ')'! {
    XPFunctionSymbol *funcSym = (id)_currentScope;
    NSMutableDictionary *params = POP();
    [funcSym.members addEntriesFromDictionary:params];
}
            funcBlock {
    // create func node tree
    NSArray *stats = REV(ABOVE(_subTok));
    XPNode *block = [XPNode nodeWithToken:_blockTok];
    [block addChildren:stats];

    POP(); // 'sub'
    XPNode *func = POP();
    [func addChild:block];
    PUSH(func); // for literals

    XPFunctionSymbol *funcSym = (id)_currentScope;
    funcSym.blockNode = block;

    // pop scope
    self.currentScope = _currentScope.enclosingScope;
};

paramList
@before {
    NSMutableDictionary *params = [NSMutableDictionary dictionary];
    PUSH(params);
    _foundDefaultParam = NO;
}
            = Empty | param (','! param)*;
param       = dfaultParam | nakedParam;

dfaultParam = qid '='! expr {
    _foundDefaultParam = YES;

    XPNode *expr = POP();
    NSString *name = POP_STR();

    // set default val
    XPFunctionSymbol *funcSym = (id)_currentScope;
    [funcSym setDefaultValue:expr forParamNamed:name];

    XPVariableSymbol *sym = [XPVariableSymbol symbolWithName:name];
    NSMutableDictionary *params = POP();
    [params setObject:sym forKey:name];
    PUSH(params);
    [funcSym.orderedParams addObject:sym];
};

nakedParam  = { !_foundDefaultParam }? qid {
    PKToken *qidTok = POP();
    NSString *name = qidTok.stringValue;
    XPVariableSymbol *sym = [XPVariableSymbol symbolWithName:name];
    NSMutableDictionary *params = POP();
    [params setObject:sym forKey:name];
    PUSH(params);

    XPFunctionSymbol *funcSym = (id)_currentScope;
    [funcSym.orderedParams addObject:sym];
};

funcBlock   = '{'! funcList? '}'!;

// FUNC LITERAL
funcLiteral = 'sub' {
    // def func
    XPFunctionSymbol *funcSym = [XPFunctionSymbol symbolWithName:_anonTok.stringValue enclosingScope:_currentScope];
    // don't define fyncSym here
    id subTok = POP();
    XPNode *func = [XPFunctionValue nodeWithToken:_anonTok];
    [func addChild:(id)funcSym];
    PUSH(func);
    PUSH(subTok); // barrier for later

    // push func scope
    self.currentScope = funcSym;
}
    funcBody;

// FUNC CALL
funcCall    = qid '(' argList? ')'! {
    NSArray *args = REV(ABOVE(_openParenTok));
    POP(); // '('
    XPNode *callNode = [XPNode nodeWithToken:_callTok];
    callNode.scope = _currentScope;
    [callNode addChild:[XPNode nodeWithToken:POP()]]; // qid
    [callNode addChildren:args];
    PUSH(callNode);
};

argList     = arg (','! arg)*;
arg         = expr;

// EXPRESSIONS
expr    = orExpr;

or      = 'or';
orExpr  = andExpr (or andExpr {
    id rhs = POP();
    XPNode *orNode = [XPNode nodeWithToken:POP()];
    id lhs = POP();
    [orNode addChild:lhs];
    [orNode addChild:rhs];
    PUSH(orNode);
})*;

and     = 'and';
andExpr = equalityExpr (and equalityExpr {
    id rhs = POP();
    XPNode *andNode = [XPNode nodeWithToken:POP()];
    id lhs = POP();
    [andNode addChild:lhs];
    [andNode addChild:rhs];
    PUSH(andNode);
})*;

eq      = '==';
ne      = '!=';
equalityExpr = relationalExpr ((eq | ne) relationalExpr {
    XPValue *rhs = POP();
    XPNode *eqNode = [XPNode nodeWithToken:POP()];
    XPValue *lhs = POP();
    [eqNode addChild:lhs];
    [eqNode addChild:rhs];
    PUSH(eqNode);
})*;

lt    =  '<';
gt    =  '>';
le    = '<=';
ge    = '>=';
relationalExpr = additiveExpr ((lt | gt | le | ge) additiveExpr {
    XPValue *rhs = POP();
    XPNode *relNode = [XPNode nodeWithToken:POP()];
    XPValue *lhs = POP();
    [relNode addChild:lhs];
    [relNode addChild:rhs];
    PUSH(relNode);
})*;

plus    = '+';
minus   = '-';
additiveExpr = multiplicativeExpr ((plus | minus) multiplicativeExpr {
    XPValue *rhs = POP();
    XPNode *addNode = [XPNode nodeWithToken:POP()];
    XPValue *lhs = POP();
    [addNode addChild:lhs];
    [addNode addChild:rhs];
    PUSH(addNode);
})*;

times   = '*';
div     = '/';
mod     = '%';
multiplicativeExpr = unaryExpr ((times | div | mod) unaryExpr {
    XPValue *rhs = POP();
    XPNode *multNode = [XPNode nodeWithToken:POP()];
    XPValue *lhs = POP();
    [multNode addChild:lhs];
    [multNode addChild:rhs];
    PUSH(multNode);
})*;

unaryExpr 
	= negatedUnary
	| unary
	;
	
negatedUnary 
@before { _negation = NO; }
@after {
    if (_negation) {
        XPNode *notNode = [XPNode nodeWithToken:_notTok];
        [notNode addChild:POP()];
		PUSH(notNode);
    }
}
	= (('not'! | '!'!) { _negation = !_negation; })+ unary {
};

unary = signedPrimaryExpr | primaryExpr;
signedPrimaryExpr
@before {
    _negative = NO; 
}
@after {
    if (_negative) {
        XPNode *negNode = [XPNode nodeWithToken:_negTok];
        [negNode addChild:POP()];
		PUSH(negNode);
    }
}
    = ('-'! { _negative = !_negative; })+ primaryExpr;

primaryExpr = atom | subExpr;

subExpr
    = '(' expr ')'! {
    id objs = ABOVE(_openParenTok);
    POP(); // discard `(`
    PUSH_ALL(REV(objs));
};

atom = scalar | arrayLiteral | funcLiteral | funcCall | indexCall | varRef;

indexCall = qid '['! expr ']'! {
    XPNode *exprNode = POP();

    XPNode *refNode = [XPNode nodeWithToken:_loadTok];
    XPNode *idNode = [XPNode nodeWithToken:POP()];
    [refNode addChild:idNode];

    XPNode *callNode = [XPNode nodeWithToken:_indexTok];
    [callNode addChild:refNode];
    [callNode addChild:exprNode];
    PUSH(callNode);
};

varRef = qid {
    XPNode *refNode = [XPNode nodeWithToken:_loadTok];
    XPNode *idNode = [XPNode nodeWithToken:POP()];
    [refNode addChild:idNode];
    PUSH(refNode);
};

arrayLiteral = '[' elemList? ']'! {
    NSArray *els = REV(ABOVE(_openSquareTok));
    XPArrayValue *val = [XPArrayValue nodeWithToken:POP()];
    [val addChildren:els];
    PUSH(val);
};
elemList = expr (','! expr)*;

scalar = null | str | num | bool;

null = 'null'! {
    PUSH([XPValue nullValue]);
};

bool
    = true { PUSH([XPBooleanValue booleanValueWithBoolean:YES]); }
    | false { PUSH([XPBooleanValue booleanValueWithBoolean:NO]); }
    ;

true = 'true'!;
false = 'false'!;

num = Number {
    PUSH([XPNumericValue nodeWithToken:POP()]);
};

str = QuotedString {
    PUSH([XPStringValue stringValueWithString:POP_QUOTED_STR()]);
};
