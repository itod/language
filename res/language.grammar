@h {
    
#define XP_TOKEN_KIND_BLOCK -2
#define XP_TOKEN_KIND_CALL  -3
#define XP_TOKEN_KIND_FUNC_DECL -4
    
@class PKTokenizer;
@class XPGlobalScope;
@protocol XPScope;
}

@interface {
+ (PKTokenizer *)tokenizer;

@property (nonatomic, retain) id <XPScope>currentScope;
@property (nonatomic, retain) XPGlobalScope *globalScope;
@property (nonatomic, assign) BOOL allowNakedExpressions;
}

@m {
#import <Language/XPNode.h>
#import <Language/XPBooleanValue.h>
#import <Language/XPNumericValue.h>
#import <Language/XPStringValue.h>
#import <Language/XPUnaryExpression.h>
#import <Language/XPNegationExpression.h>
#import <Language/XPBooleanExpression.h>
#import <Language/XPRelationalExpression.h>
#import <Language/XPArithmeticExpression.h>
#import <Language/XPCallExpression.h>
#import <Language/XPRefExpression.h>
#import <Language/XPPathExpression.h>

#import <Language/XPGlobalScope.h>
#import <Language/XPLocalScope.h>
#import <Language/XPFunctionSymbol.h>
}

@extension {
@property (nonatomic, retain) PKToken *blockTok;
@property (nonatomic, retain) PKToken *callTok;
@property (nonatomic, retain) PKToken *funcDeclTok;
@property (nonatomic, retain) PKToken *subTok;
@property (nonatomic, retain) PKToken *openParenTok;
@property (nonatomic, retain) PKToken *openCurlyTok;
@property (nonatomic, retain) PKToken *minusTok;
@property (nonatomic, retain) PKToken *colonTok;
@property (nonatomic, retain) PKToken *equalsTok;
@property (nonatomic, assign) BOOL negation;
@property (nonatomic, assign) BOOL negative;
}

@implementation {
+ (PKTokenizer *)tokenizer {
    PKTokenizer *t = [PKTokenizer tokenizer];
    [t.symbolState add:@"=="];
    [t.symbolState add:@"!="];
    [t.symbolState add:@"<="];
    [t.symbolState add:@">="];
    [t.symbolState add:@"&&"];
    [t.symbolState add:@"||"];
    
    [t setTokenizerState:t.symbolState from:'-' to:'-'];
	[t.wordState setWordChars:NO from:'\'' to:'\''];
    return t;
}

}

@init {
    self.enableVerboseErrorReporting = NO;
    self.tokenizer = [[self class] tokenizer];
    self.blockTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"BLOCK" doubleValue:0.0];
    self.blockTok.tokenKind = XP_TOKEN_KIND_BLOCK;
    self.callTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"CALL" doubleValue:0.0];
    self.callTok.tokenKind = XP_TOKEN_KIND_CALL;
    self.funcDeclTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"FUNC_DECL" doubleValue:0.0];
    self.funcDeclTok.tokenKind = XP_TOKEN_KIND_FUNC_DECL;
    self.subTok = [PKToken tokenWithTokenType:PKTokenTypeWord stringValue:@"sub" doubleValue:0.0];
    self.openParenTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"(" doubleValue:0.0];
    self.openCurlyTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:[NSString stringWithFormat:@"%C", 0x7B] doubleValue:0.0];
    self.minusTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"-" doubleValue:0.0];
    self.colonTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@":" doubleValue:0.0];
    self.equalsTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"=" doubleValue:0.0];
}

@dealloc {
    self.currentScope = nil;
    self.globalScope = nil;
    self.blockTok = nil;
    self.callTok = nil;
    self.funcDeclTok = nil;
    self.subTok = nil;
    self.openParenTok = nil;
    self.openCurlyTok = nil;
    self.minusTok = nil;
    self.colonTok = nil;
    self.equalsTok = nil;
}

// GLOBAL
program
@before {
    self.currentScope = _globalScope;
}
            = globalList;

globalList  = globalItem+ {
    NSArray *items = REV(ABOVE(nil));
    XPNode *block = [XPNode nodeWithToken:_blockTok];
    for (id item in items) [block addChild:item];
    PUSH(block);
};

globalItem  = stat | funcDecl | block;

// LOCAL
localList   = localItem+;
localItem   = stat | block;

block
@before {
    self.currentScope = [XPLocalScope scopeWithEnclosingScope:_currentScope];
}
@after {
    self.currentScope = _currentScope.enclosingScope;
}
            = '{'! localList? '}'!;

// STATEMENTS
stat        = 
            ( varDecl
            | assign
            )?
            ';'!
            | { _allowNakedExpressions }? expr
            ;

varDecl     = 'var' qid '='! expr {
    XPExpression *rhs = POP();
    XPNode *lhs = [XPNode nodeWithToken:POP()];
    PKToken *tok = POP();
    
    XPNode *stat = [XPNode nodeWithToken:tok];
    [stat addChild:lhs]; [stat addChild:rhs];
    PUSH(stat);
};
qid         = Word;

assign      = qid '=' expr {
    XPExpression *rhs = POP();
    PKToken *tok = POP();
    XPNode *lhs = [XPNode nodeWithToken:POP()];
    
    XPNode *stat = [XPNode nodeWithToken:tok];
    [stat addChild:lhs]; [stat addChild:rhs];
    PUSH(stat);
};

// FUNCTION DECL
funcList    = funcItem+;
funcItem    = stat | block | returnStat;
returnStat  = 'return' expr ';'! {
    XPExpression *expr = POP();
    XPNode *ret = [XPNode nodeWithToken:POP()];
    [ret addChild:expr];
    PUSH(ret);
};

funcDecl    = 'sub' qid {    
    // def func
    PKToken *nameTok = POP();
    XPFunctionSymbol *funcSym = [XPFunctionSymbol symbolWithName:nameTok.stringValue enclosingScope:_currentScope];
    [_currentScope defineSymbol:funcSym];
    id sub = POP();
    PUSH(funcSym);
    PUSH(nameTok);
    PUSH(sub);

    // push func scope
    self.currentScope = funcSym;
}
              '('! paramList ')'! {
    XPFunctionSymbol *funcSym = (id)_currentScope;
    NSDictionary *params = POP();
    [funcSym.members addEntriesFromDictionary:params];
}
            funcBlock {
    // create func node tree
    NSArray *stats = REV(ABOVE(_subTok));
    POP(); // 'sub'
    XPNode *block = [XPNode nodeWithToken:_blockTok];
    for (id stat in stats) [block addChild:stat];

    XPNode *func = [XPNode nodeWithToken:_funcDeclTok];
    [func addChild:[XPNode nodeWithToken:POP()]]; // qid / func name
    [func addChild:block];

    XPFunctionSymbol *funcSym = POP();
    funcSym.blockNode = block;
    PUSH(func);

    // pop scope
    self.currentScope = _currentScope.enclosingScope;
};

paramList
@before {
    NSMutableDictionary *params = [NSMutableDictionary dictionary];
    PUSH(params);
}
            = Empty | param (','! param)*;
param       = dfaultParam | nakedParam;
dfaultParam = qid '='! expr {
    XPExpression *expr = POP();
    NSString *name = POP_STR();
    NSMutableDictionary *params = PEEK();
    [params setObject:expr forKey:name];
};
nakedParam  = qid {
    NSString *name = POP_STR();
    NSMutableDictionary *params = PEEK();
    [params setObject:[NSNull null] forKey:name];
};

funcBlock   = '{'! funcList? '}'!;

// FUNC CALL
funcCall    = qid '(' argList? ')'! {
    NSArray *args = ABOVE(_openParenTok);
    POP(); // '('
    XPCallExpression *call = [XPCallExpression nodeWithToken:_callTok];
    call.scope = _currentScope;
    [call addChild:[XPNode nodeWithToken:POP()]]; // qid
    for (id arg in args) [call addChild:arg];
    PUSH(call);
};

argList     = arg (','! arg)*;
arg         = expr;

// EXPRESSIONS
expr    = orExpr;

orOp    =  'or'! | '||'!;
orExpr  = andExpr (orOp andExpr {
    XPValue *rhs = POP();
    XPValue *lhs = POP();
    PUSH([XPBooleanExpression booleanExpressionWithOperand:lhs operator:XP_TOKEN_KIND_OR operand:rhs]);
})*;

andOp   = 'and'! | '&&'!;
andExpr = equalityExpr (andOp equalityExpr {
    XPValue *rhs = POP();
    XPValue *lhs = POP();
    PUSH([XPBooleanExpression booleanExpressionWithOperand:lhs operator:XP_TOKEN_KIND_AND operand:rhs]);
})*;

eqOp    @after { PUSH(@(XP_TOKEN_KIND_EQ)); }
        = '=='! | 'eq'!;
neOp    @after { PUSH(@(XP_TOKEN_KIND_NE)); }
        = '!='! | 'ne'!;
equalityExpr = relationalExpr ((eqOp | neOp) relationalExpr {
    XPValue *rhs = POP();
    NSInteger op = POP_INT();
    XPValue *lhs = POP();
    PUSH([XPRelationalExpression relationalExpressionWithOperand:lhs operator:op operand:rhs]);
})*;

ltOp    @after { PUSH(@(XP_TOKEN_KIND_LT)); }
        =  '<'! | 'lt'!;
gtOp    @after { PUSH(@(XP_TOKEN_KIND_GT)); }
        =  '>'! | 'gt'!;
leOp    @after { PUSH(@(XP_TOKEN_KIND_LE)); }
        = '<='! | 'le'!;
geOp    @after { PUSH(@(XP_TOKEN_KIND_GE)); }
        = '>='! | 'ge'!;
relationalExpr = additiveExpr ((ltOp | gtOp | leOp | geOp) additiveExpr {
    XPValue *rhs = POP();
    NSInteger op = POP_INT();
    XPValue *lhs = POP();
    PUSH([XPRelationalExpression relationalExpressionWithOperand:lhs operator:op operand:rhs]);
})*;

plus    @after { PUSH(@(XP_TOKEN_KIND_PLUS)); }
        = '+'!;
minus   @after { PUSH(@(XP_TOKEN_KIND_MINUS)); }
        = '-'!;
additiveExpr = multiplicativeExpr ((plus | minus) multiplicativeExpr {
    XPValue *rhs = POP();
    NSInteger op = POP_INT();
    XPValue *lhs = POP();
    PUSH([XPArithmeticExpression arithmeticExpressionWithOperand:lhs operator:op operand:rhs]);
})*;

times   @after { PUSH(@(XP_TOKEN_KIND_TIMES)); }
        = '*'!;
div     @after { PUSH(@(XP_TOKEN_KIND_DIV)); }
        = '/'!;
mod     @after { PUSH(@(XP_TOKEN_KIND_MOD)); }
        = '%'!;
multiplicativeExpr = unaryExpr ((times | div | mod) unaryExpr {
    XPValue *rhs = POP();
    NSInteger op = POP_INT();
    XPValue *lhs = POP();
    PUSH([XPArithmeticExpression arithmeticExpressionWithOperand:lhs operator:op operand:rhs]);
})*;

unaryExpr 
	= negatedUnary
	| unary
	;
	
negatedUnary 
@before { _negation = NO; }
@after {
    if (_negation)
		PUSH([XPNegationExpression negationExpressionWithExpression:POP()]);
}
	= (('not'! | '!'!) { _negation = !_negation; })+ unary {
};

unary = signedPrimaryExpr | primaryExpr;
signedPrimaryExpr
@before {
    _negative = NO; 
}
@after {
    if (_negative)
		PUSH([XPUnaryExpression unaryExpressionWithExpression:POP()]);
}
    = ('-'! { _negative = !_negative; })+ primaryExpr;

primaryExpr = atom | subExpr;

subExpr
    = '(' expr ')'! {
    id objs = ABOVE(_openParenTok);
    POP(); // discard `(`
    PUSH_ALL(REV(objs));
};

atom = literal | funcCall | varRef | pathExpr;

varRef = qid {
    XPRefExpression *varRef = [XPRefExpression nodeWithToken:POP()];
    PUSH(varRef);
};

pathExpr
@before {
    PUSH(_openParenTok);
}
@after {
    id toks = REV(ABOVE(_openParenTok));
    POP(); // discard `_openParenTok`
    PUSH([XPPathExpression pathExpressionWithSteps:toks]);
}
    = identifier ('.'! step)*;

step = identifier | num;
identifier = Word { PUSH(POP_STR()); };

literal = str | num | bool;
bool
    = true { PUSH([XPBooleanValue booleanValueWithBoolean:YES]); }
    | false { PUSH([XPBooleanValue booleanValueWithBoolean:NO]); }
    ;

true = 'true'!;
false = 'false'!;

num = Number {
    PUSH([XPNumericValue nodeWithToken:POP()]);
};

str = QuotedString {
    PUSH([XPStringValue stringValueWithString:POP_QUOTED_STR()]);
};
