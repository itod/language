@h {
    
#define XP_TOKEN_KIND_BLOCK -2
#define XP_TOKEN_KIND_CALL  -3
#define XP_TOKEN_KIND_APPEND -4
#define XP_TOKEN_KIND_SUBSCRIPT_ASSIGN -5
#define XP_TOKEN_KIND_SUBSCRIPT_LOAD -6
#define XP_TOKEN_KIND_NEG -7
#define XP_TOKEN_KIND_LOAD -8
#define XP_TOKEN_KIND_FUNC_LITERAL -9
#define XP_TOKEN_KIND_ARRAY_LITERAL -10
#define XP_TOKEN_KIND_DICT_LITERAL -11

@class PKTokenizer;
@class XPGlobalScope;
@class XPMemorySpace;
@protocol XPScope;
}

@interface {
+ (PKTokenizer *)tokenizer;

@property (nonatomic, retain) id <XPScope>currentScope;
@property (nonatomic, retain) XPGlobalScope *globalScope;
@property (nonatomic, retain) XPMemorySpace *globals;
@property (nonatomic, retain) NSMutableArray *allScopes;
@property (nonatomic, assign) BOOL foundDefaultParam;
}

@m {
#import <Language/XPException.h>
#import <Language/XPNode.h>
#import <Language/XPGlobalScope.h>
#import <Language/XPLocalScope.h>
#import <Language/XPVariableSymbol.h>
#import <Language/XPFunctionSymbol.h>

@interface PKParser ()
- (void)raiseInRange:(NSRange)r lineNumber:(NSUInteger)lineNum name:(NSString *)name format:(NSString *)fmt, ...;
@end
}

@extension {
@property (nonatomic, retain) PKToken *blockTok;
@property (nonatomic, retain) PKToken *loadTok;
@property (nonatomic, retain) PKToken *callTok;
@property (nonatomic, retain) PKToken *subscriptLoadTok;
@property (nonatomic, retain) PKToken *subscriptAssignTok;
@property (nonatomic, retain) PKToken *appendTok;
@property (nonatomic, retain) PKToken *anonTok;
@property (nonatomic, retain) PKToken *openParenTok;
@property (nonatomic, retain) PKToken *openCurlyTok;
@property (nonatomic, retain) PKToken *openSquareTok;
@property (nonatomic, retain) PKToken *minusTok;
@property (nonatomic, retain) PKToken *colonTok;
@property (nonatomic, retain) PKToken *equalsTok;
@property (nonatomic, retain) PKToken *notTok;
@property (nonatomic, retain) PKToken *negTok;
@property (nonatomic, retain) PKToken *unaryTok;
@property (nonatomic, retain) PKToken *commaTok;
@property (nonatomic, retain) PKToken *arrayTok;
@property (nonatomic, retain) PKToken *dictTok;
@property (nonatomic, retain) XPNode *firstNode;
@property (nonatomic, retain) XPNode *lastNode;
@property (nonatomic, assign) BOOL negation;
@property (nonatomic, assign) BOOL negative;
@property (nonatomic, assign) BOOL canBreak;
@property (nonatomic, assign) BOOL valid;
}

@implementation {
+ (PKTokenizer *)tokenizer {
    PKTokenizer *t = [PKTokenizer tokenizer];
    [t.symbolState add:@"=="];
    [t.symbolState add:@"!="];
    [t.symbolState add:@"<="];
    [t.symbolState add:@">="];
    [t.symbolState add:@"+="];
    [t.symbolState add:@"-="];
    [t.symbolState add:@"*="];
    [t.symbolState add:@"/="];
//    [t.symbolState add:@"&&"];
    [t.symbolState add:@"||"];
    [t.symbolState add:@"<<"];
    [t.symbolState add:@">>"];
    
    [t setTokenizerState:t.symbolState from:'\n' to:'\n'];
    [t.whitespaceState setWhitespaceChars:NO from:'\n' to:'\n'];
    [t setTokenizerState:t.symbolState from:'-' to:'-'];
    [t.wordState setWordChars:NO from:'-' to:'-'];
    [t.wordState setWordChars:NO from:'\'' to:'\''];
    
    t.quoteState.allowsEOFTerminatedQuotes = NO;
    
    // dec numbers
    [t.numberState addGroupingSeparator:'_' forRadix:10];
    // hex numbers
    [t setTokenizerState:t.numberState from:'#' to:'#'];
    [t.numberState addPrefix:@"#" forRadix:16];
    [t.numberState addGroupingSeparator:'_' forRadix:16];
    // bin numbers
    [t setTokenizerState:t.numberState from:'$' to:'$'];
    [t.numberState addPrefix:@"$" forRadix:2];
    [t.numberState addGroupingSeparator:'_' forRadix:2];

    return t;
}

- (void)setCurrentScope:(id<XPScope>)s {
    if (s != _currentScope) {
        [_currentScope autorelease];
        _currentScope = [s retain];
    
        if (s) {
            TDAssert(_allScopes);
            [_allScopes addObject:s];
        }
    }
}
    
}

@init {
    self.enableVerboseErrorReporting = NO;
    self.tokenizer = [[self class] tokenizer];
    self.blockTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"BLOCK" doubleValue:0.0];
    self.blockTok.tokenKind = XP_TOKEN_KIND_BLOCK;
    self.loadTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"LOAD" doubleValue:0.0];
    self.loadTok.tokenKind = XP_TOKEN_KIND_LOAD;
    self.callTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"CALL" doubleValue:0.0];
    self.callTok.tokenKind = XP_TOKEN_KIND_CALL;
    self.subscriptLoadTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"SUBSCRIPT_LOAD" doubleValue:0.0];
    self.subscriptLoadTok.tokenKind = XP_TOKEN_KIND_SUBSCRIPT_LOAD;
    self.subscriptAssignTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"SUBSCRIPT_ASSIGN" doubleValue:0.0];
    self.subscriptAssignTok.tokenKind = XP_TOKEN_KIND_SUBSCRIPT_ASSIGN;
    self.appendTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"APPEND" doubleValue:0.0];
    self.appendTok.tokenKind = XP_TOKEN_KIND_APPEND;
    self.anonTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"<ANON>" doubleValue:0.0];
    self.anonTok.tokenKind = XP_TOKEN_KIND_FUNC_LITERAL;
    self.openParenTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"(" doubleValue:0.0];
    self.openCurlyTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:[NSString stringWithFormat:@"%C", 0x7B] doubleValue:0.0];
    self.openSquareTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"[" doubleValue:0.0];
    self.minusTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"-" doubleValue:0.0];
    self.colonTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@":" doubleValue:0.0];
    self.equalsTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"=" doubleValue:0.0];
    self.notTok = [PKToken tokenWithTokenType:PKTokenTypeWord stringValue:@"not" doubleValue:0.0];
    self.notTok.tokenKind = XP_TOKEN_KIND_NOT;
    self.negTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"NEG" doubleValue:0.0];
    self.negTok.tokenKind = XP_TOKEN_KIND_NEG;
    self.commaTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"," doubleValue:0.0];
    self.arrayTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"ARRAY" doubleValue:0.0];
    self.arrayTok.tokenKind = XP_TOKEN_KIND_ARRAY_LITERAL;
    self.dictTok = [PKToken tokenWithTokenType:PKTokenTypeSymbol stringValue:@"DICT" doubleValue:0.0];
    self.dictTok.tokenKind = XP_TOKEN_KIND_DICT_LITERAL;
    
    self.firstNode = [XPNode nodeWithToken:[PKToken tokenWithTokenType:PKTokenTypeNumber stringValue:@"1" doubleValue:1.0]];
    self.firstNode.token.tokenKind = TOKEN_KIND_BUILTIN_NUMBER;
    self.lastNode = [XPNode nodeWithToken:[PKToken tokenWithTokenType:PKTokenTypeNumber stringValue:@"-1" doubleValue:-1.0]];
    self.lastNode.token.tokenKind = TOKEN_KIND_BUILTIN_NUMBER;
}

@dealloc {
    self.currentScope = nil;
    self.globalScope = nil;
    self.globals = nil;
    self.allScopes = nil;
    self.blockTok = nil;
    self.loadTok = nil;
    self.callTok = nil;
    self.subscriptLoadTok = nil;
    self.subscriptAssignTok = nil;
    self.appendTok = nil;
    self.anonTok = nil;
    self.openParenTok = nil;
    self.openCurlyTok = nil;
    self.openSquareTok = nil;
    self.minusTok = nil;
    self.colonTok = nil;
    self.equalsTok = nil;
    self.notTok = nil;
    self.negTok = nil;
    self.unaryTok = nil;
    self.commaTok = nil;
    self.arrayTok = nil;
    self.dictTok = nil;
    self.firstNode = nil;
    self.lastNode = nil;
}

// GLOBAL
program
@before {
    self.valid = YES;
    self.currentScope = _globalScope;
}
            = globalList;

globalList  = item* {
    NSArray *items = REV(ABOVE(nil));
    XPNode *block = [XPNode nodeWithToken:_blockTok];
    [block addChildren:items];
    PUSH(block);
};
item  = anyBlock | stats;
anyBlock
@after {self.valid=YES;}
            = { _valid }? ifBlock | whileBlock | forBlock | localBlock | tryBlock | funcDecl;

// LOCAL
localList   = item* {
    NSArray *items = REV(ABOVE(_openCurlyTok));
    POP(); // 'curly'
    XPNode *block = [XPNode nodeWithToken:_blockTok];
    [block addChildren:items];
    PUSH(block);
};

// FUNC
funcBlock   = '{' localList '}'!;

localBlock
@before { self.currentScope = [XPLocalScope scopeWithEnclosingScope:_currentScope]; }
@after { self.currentScope = _currentScope.enclosingScope; }
            = '{' localList '}'!;

// STATEMENTS
nl = ('\n'!)*;
terminator 
@after {self.valid=YES;}
            = (nl|';'!);
stats       = stat (terminator stat)*;
stat        = terminator | { _valid }? realStat;
realStat    
@after {self.valid=NO;}
            = varDecl
            | assign
            | assignSubscript
            | assignAppend
            | throwStat
            | expr
            | break
            | continue
            | returnStat
            ;
            
varDecl     = 'var' nl qid nl '='! nl expr {
    XPNode *rhs = POP();
    XPNode *lhs = [XPNode nodeWithToken:POP()];
    PKToken *tok = POP();
    
    XPNode *stat = [XPNode nodeWithToken:tok];
    [stat addChild:lhs]; [stat addChild:rhs];
    PUSH(stat);
};
qid         = Word;

plusEq  = '+=';
minusEq = '-=';
timesEq = '*=';
divEq   = '/=';
assign      = qid nl ('=' | plusEq | minusEq | timesEq | divEq) nl expr {
    XPNode *rhs = POP();
    PKToken *tok = POP();
    XPNode *lhs = [XPNode nodeWithToken:POP()];
    
    XPNode *stat = [XPNode nodeWithToken:tok];
    [stat addChild:lhs]; [stat addChild:rhs];
    PUSH(stat);
};

assignSubscript = qid nl '[' nl assignSlice nl ']'! nl '='! nl expr {
    XPNode *rhs = POP();

    NSArray *nodes = REV(ABOVE(_openSquareTok));
    POP(); // square
    
    XPNode *startNode = startNode=nodes[0];
    XPNode *stopNode = nil;
    switch ([nodes count]) {
        case 1: { } break;
        case 2: { stopNode=nodes[1]; } break;
        default:{ TDAssert(0); } break;
    }

    XPNode *lhs = [XPNode nodeWithToken:POP()];
    XPNode *callNode = [XPNode nodeWithToken:_subscriptAssignTok];
    [callNode addChild:lhs];
    [callNode addChild:rhs];
    [callNode addChild:startNode];
    if (stopNode) [callNode addChild:stopNode];
    PUSH(callNode);
};

assignSlice = (expr|Empty{PUSH(_firstNode);}) nl ':'! nl (expr|Empty{PUSH(_lastNode);})
            | expr
            ;

assignAppend = qid nl '['! nl ']'! nl '='! nl expr {
    XPNode *rhs = POP();
    XPNode *lhs = [XPNode nodeWithToken:POP()];
    
    XPNode *stat = [XPNode nodeWithToken:_appendTok];
    [stat addChild:lhs];
    [stat addChild:rhs];
    PUSH(stat);
};

// WHILE BLOCK
whileBlock
@before {self.canBreak = YES;}
@after {self.canBreak = NO;}
            = 'while' expr localBlock {
    XPNode *block = POP();
    XPNode *expr = POP();
    XPNode *whileNode = [XPNode nodeWithToken:POP()];
    [whileNode addChild:expr];
    [whileNode addChild:block];
    PUSH(whileNode);
};
break       = 'break' {
    PUSH([XPNode nodeWithToken:POP()]);
};
continue    = 'continue' {
    PUSH([XPNode nodeWithToken:POP()]);
};

// FOR BLOCK
forBlock
@before {self.canBreak = YES;}
@after {self.canBreak = NO;}
            = 'for' qid (',' qid)? 'in'! expr localBlock {
    XPNode *block = POP();
    XPNode *collExpr = POP();
    XPNode *valNode = [XPNode nodeWithToken:POP()];
    XPNode *keyNode = nil;
    
    if (EQ(PEEK(), _commaTok)) {
        POP(); // comma
        keyNode = [XPNode nodeWithToken:POP()];
    }
    
    XPNode *forNode = [XPNode nodeWithToken:POP()];
    [forNode addChild:valNode];
    [forNode addChild:collExpr];
    [forNode addChild:block];
    if (keyNode) [forNode addChild:keyNode];
    PUSH(forNode);
};

// IF BLOCK
ifBlock     = 'if' nl expr nl localBlock {
    XPNode *block = POP();
    XPNode *expr = POP();
    XPNode *ifNode = [XPNode nodeWithToken:POP()];
    [ifNode addChild:expr];
    [ifNode addChild:block];
    PUSH(ifNode);
}
              elifBlock* elseBlock?;
elifBlock   
@before {self.valid=YES;}
            = 'else'! 'if' expr localBlock {
    XPNode *block = POP();
    XPNode *expr = POP();
    XPNode *elifNode = [XPNode nodeWithToken:POP()];
    [elifNode addChild:expr];
    [elifNode addChild:block];

    XPNode *ifNode = PEEK();
    [ifNode addChild:elifNode];
};
elseBlock
@before {self.valid=YES;}
            = 'else' localBlock {
    XPNode *block = POP();
    XPNode *elseNode = [XPNode nodeWithToken:POP()];
    [elseNode addChild:block];

    XPNode *ifNode = PEEK();
    [ifNode addChild:elseNode];
};

// TRY BLOCK
tryBlock    = 'try' localBlock {
    XPNode *block = POP();
    XPNode *tryNode = [XPNode nodeWithToken:POP()];
    [tryNode addChild:block];
    PUSH(tryNode);
}
              (catchBlock finallyBlock? | finallyBlock);
catchBlock   
@before {self.valid=YES;}
          = 'catch' qid localBlock {
  XPNode *block = POP();
  XPNode *qid = [XPNode nodeWithToken:POP()];
  XPNode *catchNode = [XPNode nodeWithToken:POP()];
  [catchNode addChild:qid];
  [catchNode addChild:block];

  XPNode *tryNode = PEEK();
  [tryNode addChild:catchNode];
};
finallyBlock
@before {self.valid=YES;}
            = 'finally' localBlock {
    XPNode *block = POP();
    XPNode *finallyNode = [XPNode nodeWithToken:POP()];
    [finallyNode addChild:block];

    XPNode *tryNode = PEEK();
    [tryNode addChild:finallyNode];
};

throwStat   = 'throw' nl expr {
    XPNode *expr = POP();
    XPNode *throwNode = [XPNode nodeWithToken:POP()];
    [throwNode addChild:expr];
    PUSH(throwNode);
};

// FUNCTION DECL
returnStat  = 'return' nl expr {
    XPNode *expr = POP();
    XPNode *ret = [XPNode nodeWithToken:POP()];
    [ret addChild:expr];
    PUSH(ret);
};

funcDecl    = 'sub' qid {    
    // def func
    PKToken *nameTok = POP();
    XPFunctionSymbol *funcSym = [XPFunctionSymbol symbolWithName:nameTok.stringValue enclosingScope:_currentScope];
    [_currentScope defineSymbol:funcSym];
    id subTok = POP();
    XPNode *funcNode = [XPNode nodeWithToken:subTok];
    XPNode *nameNode = [XPNode nodeWithToken:nameTok];
    nameNode.scope = _currentScope;
    [funcNode addChild:nameNode];
    PUSH(funcNode);
    PUSH(subTok); // barrier for later

    // push func scope
    self.currentScope = funcSym;
}           funcBody;

funcBody
@after {
    XPNode *block = POP();
    POP(); // 'sub'
    XPNode *funcNode = POP();
    [funcNode addChild:block];
    PUSH(funcNode);

    XPFunctionSymbol *funcSym = (id)_currentScope;
    funcSym.blockNode = block;

    // pop scope
    self.currentScope = _currentScope.enclosingScope;
}
            = '('! paramList ')'! {
    XPFunctionSymbol *funcSym = (id)_currentScope;
    NSMutableDictionary *params = POP();
    [funcSym.params addEntriesFromDictionary:params];
}
            funcBlock;

paramList
@before {
    NSMutableDictionary *params = [NSMutableDictionary dictionary];
    PUSH(params);
    _foundDefaultParam = NO;
}
            = Empty | param (','! param)*;
param       = dfaultParam | nakedParam;

dfaultParam = qid '='! expr {
    _foundDefaultParam = YES;

    XPNode *exprNode = POP();
    PKToken *nameToken = PEEK();
    NSString *name = POP_STR();

    XPFunctionSymbol *funcSym = (id)_currentScope;

    // set default val
    [funcSym setDefaultExpression:exprNode forParamNamed:name];

    XPVariableSymbol *sym = [XPVariableSymbol symbolWithName:name];
    NSMutableDictionary *params = POP();

    // check for dupe param names
    if ([params objectForKey:name]) [self raiseInRange:NSMakeRange(nameToken.offset, [name length]) lineNumber:nameToken.lineNumber name:XPSyntaxError format:@"more than one param named `%@` in declaration of subroutine `%@`", name, funcSym.name];

    [params setObject:sym forKey:name];
    PUSH(params);
    [funcSym.orderedParams addObject:sym];
};

nakedParam  = { !_foundDefaultParam }? qid {
    PKToken *nameTok = PEEK();
    NSString *name = POP_STR();
    XPVariableSymbol *sym = [XPVariableSymbol symbolWithName:name];
    XPFunctionSymbol *funcSym = (id)_currentScope;
    NSMutableDictionary *params = POP();
        
    // check for dupe param names
    if ([params objectForKey:name]) [self raiseInRange:NSMakeRange(nameTok.offset, [name length]) lineNumber:nameTok.lineNumber name:XPSyntaxError format:@"more than one param named `%@` in declaration of subroutine `%@`", name, funcSym.name];
        
    [params setObject:sym forKey:name];
    PUSH(params);

    [funcSym.orderedParams addObject:sym];
};

// FUNC LITERAL
funcLiteral = 'sub' {
    // def func
    XPFunctionSymbol *funcSym = [XPFunctionSymbol symbolWithName:_anonTok.stringValue enclosingScope:_currentScope];
    funcSym.scope = _currentScope;
    // don't define fyncSym here
    PKToken *subTok = POP();
    XPNode *funcNode = [XPNode nodeWithToken:_anonTok];
    [funcNode addChild:(id)funcSym];
    PUSH(funcNode);
    PUSH(subTok); // barrier for later

    // push func scope
    self.currentScope = funcSym;
}
    funcBody;

// FUNC CALL
funcCall    = '(' nl argList? nl ')'! {
    NSArray *args = REV(ABOVE(_openParenTok));
    POP(); // '('
    XPNode *callNode = [XPNode nodeWithToken:_callTok];
    [callNode addChild:POP()]; // call target obj
    [callNode addChildren:args];
    PUSH(callNode);
};

argList     = arg (nl ','! nl arg)*;
arg         = expr;

// EXPRESSIONS
expr    = orExpr;

or      = 'or';
orExpr  = andExpr (nl or nl andExpr {
    id rhs = POP();
    XPNode *orNode = [XPNode nodeWithToken:POP()];
    id lhs = POP();
    [orNode addChild:lhs];
    [orNode addChild:rhs];
    PUSH(orNode);
})*;

and     = 'and';
andExpr = equalityExpr (nl and nl equalityExpr {
    id rhs = POP();
    XPNode *andNode = [XPNode nodeWithToken:POP()];
    id lhs = POP();
    [andNode addChild:lhs];
    [andNode addChild:rhs];
    PUSH(andNode);
})*;

eq      = '==';
ne      = '!=';
is      = 'is';
equalityExpr = relationalExpr (nl (eq | ne | is) nl relationalExpr {
    XPNode *rhs = POP();
    XPNode *eqNode = [XPNode nodeWithToken:POP()];
    XPNode *lhs = POP();
    [eqNode addChild:lhs];
    [eqNode addChild:rhs];
    PUSH(eqNode);
})*;

lt    =  '<';
gt    =  '>';
le    = '<=';
ge    = '>=';
relationalExpr = additiveExpr (nl (lt | gt | le | ge) nl additiveExpr {
    XPNode *rhs = POP();
    XPNode *relNode = [XPNode nodeWithToken:POP()];
    XPNode *lhs = POP();
    [relNode addChild:lhs];
    [relNode addChild:rhs];
    PUSH(relNode);
})*;

plus    = '+';
minus   = '-';
additiveExpr = multiplicativeExpr (nl (plus | minus) nl multiplicativeExpr {
    XPNode *rhs = POP();
    XPNode *addNode = [XPNode nodeWithToken:POP()];
    XPNode *lhs = POP();
    [addNode addChild:lhs];
    [addNode addChild:rhs];
    PUSH(addNode);
})*;

times   = '*';
div     = '/';
mod     = '%';
multiplicativeExpr = bitExpr (nl (times | div | mod) nl bitExpr {
    XPNode *rhs = POP();
    XPNode *multNode = [XPNode nodeWithToken:POP()];
    XPNode *lhs = POP();
    [multNode addChild:lhs];
    [multNode addChild:rhs];
    PUSH(multNode);
})*;

bitAnd  = '&';
bitOr   = '|';
bitXor  = '^';
bitExpr = shiftExpr (nl (bitAnd | bitOr | bitXor) nl shiftExpr {
    XPNode *rhs = POP();
    XPNode *bitNode = [XPNode nodeWithToken:POP()];
    XPNode *lhs = POP();
    [bitNode addChild:lhs];
    [bitNode addChild:rhs];
    PUSH(bitNode);
})*;

shiftLeft = '<<';
shiftRight = '>>';
shiftExpr = unaryExpr (nl (shiftLeft | shiftRight) nl unaryExpr {
    XPNode *rhs = POP();
    XPNode *shiftNode = [XPNode nodeWithToken:POP()];
    XPNode *lhs = POP();
    [shiftNode addChild:lhs];
    [shiftNode addChild:rhs];
    PUSH(shiftNode);
})*;

unaryExpr 
	= negatedUnary
	| unary
	;
	
negatedUnary 
@before { _negation = NO; }
@after {
    if (_negation) {
        XPNode *notNode = [XPNode nodeWithToken:_notTok];
        [notNode addChild:POP()];
		PUSH(notNode);
    }
}
	= (('not'! | '!'!) { _negation = !_negation; })+ nl unary {
};

bitNot = '~';
unary = signedPrimaryExpr | primaryExpr;
signedPrimaryExpr
@before {
    _negative = NO; 
}
@after {
    if (_negative) {
        XPNode *negNode = [XPNode nodeWithToken:_unaryTok];
        [negNode addChild:POP()];
		PUSH(negNode);
    }
}
    = ('-'! { self.unaryTok = _negTok; _negative = !_negative; })+ nl primaryExpr
    | (bitNot { self.unaryTok = POP(); _negative = !_negative; })+ nl primaryExpr
    ;

primaryExpr = (atom | subExpr) trailer*;
trailer = funcCall | loadSubscript;

subExpr
    = '(' nl expr nl ')'! {
    id objs = ABOVE(_openParenTok);
    POP(); // discard `(`
    PUSH_ALL(REV(objs));
};

atom = scalar | arrayLiteral | dictLiteral | funcLiteral | varRef;

loadSubscript = '[' nl loadSlice nl ']'! {
    NSArray *nodes = REV(ABOVE(_openSquareTok));
    POP(); // square
    
    XPNode *startNode = startNode=nodes[0];
    XPNode *stopNode = nil;
    XPNode *stepNode = nil;
    switch ([nodes count]) {
        case 1: { } break;
        case 2: { stopNode=nodes[1]; } break;
        case 3: { stopNode=nodes[1]; stepNode=nodes[2]; } break;
        default:{ TDAssert(0); } break;
    }

    XPNode *targetNode = POP();
    XPNode *callNode = [XPNode nodeWithToken:_subscriptLoadTok];
    [callNode addChild:targetNode];
    [callNode addChild:startNode];
    if (stopNode) [callNode addChild:stopNode];
    if (stepNode) [callNode addChild:stepNode];
    PUSH(callNode);
};

loadSlice = (expr|Empty{PUSH(_firstNode);}) nl ':'! nl (expr|Empty{PUSH(_lastNode);}) sliceop?
          | expr
          ;
sliceop = nl ':'! nl (expr|Empty{PUSH(_lastNode);});

varRef = qid {
    XPNode *refNode = [XPNode nodeWithToken:_loadTok];
    XPNode *idNode = [XPNode nodeWithToken:POP()];
    idNode.scope = _currentScope;
    [refNode addChild:idNode];
    PUSH(refNode);
};

arrayLiteral = '[' nl elemList? nl ']'! {
    NSArray *els = REV(ABOVE(_openSquareTok));
    POP(); // square
    XPNode *arrNode = [XPNode nodeWithToken:_arrayTok];
    [arrNode addChildren:els];
    PUSH(arrNode);
};
elemList = expr (nl ','! nl expr)*;

dictLiteral = '{' nl pairList? nl '}'! {
    NSArray *pairs = ABOVE(_openCurlyTok);
    POP(); // culry
    XPNode *dictNode = [XPNode nodeWithToken:_dictTok];
    [dictNode addChildren:pairs];
    PUSH(dictNode);
};
pairList = pair (nl ','! nl pair)*;
pair = expr nl ':' nl expr {
    XPNode *valExpr = POP();
    PKToken *colonTok = POP();
    XPNode *keyExpr = POP();
    XPNode *pairNode = [XPNode nodeWithToken:colonTok];
    [pairNode addChild:keyExpr];
    [pairNode addChild:valExpr];
    PUSH(pairNode);
};

scalar = null | nan | str | num | bool;

null = 'null' {
    PUSH([XPNode nodeWithToken:POP()]);
};

nan = 'NaN' {
    PUSH([XPNode nodeWithToken:POP()]);
};

bool = ('true' | 'false') {
    PUSH([XPNode nodeWithToken:POP()]);
};

num = Number {
    PUSH([XPNode nodeWithToken:POP()]);
};

str = QuotedString {
    //PKToken *oldTok = PEEK();
    NSString *s = POP_QUOTED_STR();
    PKToken *tok = [PKToken tokenWithTokenType:PKTokenTypeWord stringValue:s doubleValue:0.0];
    tok.tokenKind = TOKEN_KIND_BUILTIN_WORD;
    PUSH([XPNode nodeWithToken:tok]);
};
